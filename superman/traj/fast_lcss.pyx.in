# -*- cython -*-

# cython: initializedcheck=False
# cython: boundscheck=False
# cython: wraparound=False
# cython: nonecheck=False
# cython: cdivision=True
import numpy as np
cimport numpy as np
from libc.math cimport fmin, fabs, sqrt

{{py:
METRICS = ['match', 'combo']
}}

{{def preamble}}

  cdef Py_ssize_t na = <Py_ssize_t> a.shape[0]+1
  cdef Py_ssize_t nb = <Py_ssize_t> b.shape[0]+1
  cdef Py_ssize_t i, j, min_j = 1
  cdef float dx, ay, by, lcs_diag = 0, ssa = 0, ssb = 0
  cdef float[::1] aa, bb
  cdef float band_eps = optimal_band_eps(a, b)

{{enddef}}

{{for mtype in METRICS}}

cpdef float traj_{{mtype}}(float[:,::1] a, float[:,::1] b, float w) nogil:
  {{preamble}}
  for i in range(na-1):
    aa = a[i,:]
    for j in range(min_j, nb):
      bb = b[j-1,:]
      dx = aa[0] - bb[0]
      if fabs(dx) <= band_eps:
        ay = aa[1]
        by = bb[1]
        lcs_diag += {{mtype}}_score(ay, by, w)
        ssa += ay*ay
        ssb += by*by
      elif dx > 0:
        # b is still behind a
        min_j = j
      else:
        # b is past a, so no more matches, skip ahead
        break
  return lcs_diag / sqrt(ssa * ssb)

cpdef float traj_{{mtype}}_min(
    float[:,::1] a, float[:,::1] b, float w,
    float[:] a_window, float[:] b_window) nogil:
  {{preamble}}
  cdef Py_ssize_t awi = 0, bwi = 0, window_size = a_window.shape[0]
  for i in range(window_size):
    a_window[i] = a[i,1]
    b_window[i] = b[i,1]

  for i in range(na-1):
    aa = a[i,:]
    ay = aa[1]
    a_window[awi] = ay
    awi = (awi+1) % window_size
    ay -= _minimum(a_window, window_size)
    for j in range(min_j, nb):
      bb = b[j-1,:]
      dx = aa[0] - bb[0]
      if fabs(dx) <= band_eps:
        by = bb[1]
        b_window[bwi] = by
        bwi = (bwi+1) % window_size
        by -= _minimum(b_window, window_size)
        lcs_diag += {{mtype}}_score(ay, by, w)
        ssa += ay*ay
        ssb += by*by
      elif dx > 0:
        # b is still behind a
        min_j = j
      else:
        # b is past a, so no more matches, skip ahead
        break
  return lcs_diag / sqrt(ssa * ssb)

{{endfor}}

cpdef float optimal_band_eps(float[:,::1] a, float[:,::1] b) nogil:
  cdef float adiff = mean_band_difference(a)
  cdef float bdiff = mean_band_difference(b)
  return sqrt(adiff * bdiff) / 2.0  # half the geometric mean


cdef float mean_band_difference(float[:,::1] x) nogil:
  cdef float running_sum = 0
  cdef Py_ssize_t i, n = <Py_ssize_t> x.shape[0] - 1
  for i in range(n):
    running_sum += x[i+1,0] - x[i,0]
  return running_sum / n


cdef inline float match_score(float ay, float by, float intensity_eps) nogil:
  return fmin(ay, by) * (1.0 - fabs(ay - by) ** intensity_eps)


cdef inline float combo_score(float ay, float by, float w) nogil:
  return w * fabs(ay - by) - (1 - w) * (ay * by)


cdef inline float _minimum(float[:] buf, Py_ssize_t n) nogil:
  cdef float x, minval = buf[0]
  cdef Py_ssize_t i
  for i in range(1, n):
    x = buf[i]
    if x < minval:
      minval = x
  return minval

